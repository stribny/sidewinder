{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sidewinder","text":"<p>Sidewinder is an open-source Django starter kit that focuses on good defaults, developer experience, and deployment. Also, a snake.</p> <p>You can start a new Django project without worrying about the correct project structure, or what development and testing tools to install and how to configure them. You can also deploy your new project right away with provided Ansible playbook in a few minutes.</p>"},{"location":"#philosophy","title":"Philosophy","text":"<p>Sidewinder is opinionated to provide smooth experience from starting a new project to deploying it on a single Virtual Private Server (VPS). It is ideal for indie hackers, educators, students and the like.</p>"},{"location":"#main-features","title":"Main features","text":""},{"location":"#configuration","title":"Configuration","text":"<ul> <li>Good default project structure</li> <li>Dependency management with uv</li> <li>Project configuration via environment variables thanks to django-environ</li> <li>Pre-configured for GeoDjango</li> </ul>"},{"location":"#authentication","title":"Authentication","text":"<ul> <li>Custom <code>User</code> model to allow future extensibility</li> <li>Configured django-allauth for email login and 3rd party authentication</li> <li>Stronger password hashing with argon2-cffi</li> </ul>"},{"location":"#frontend","title":"Frontend","text":"<ul> <li>It is expected that you bring your own CSS/CSS framework</li> <li>Basic one-file CSS is included to style authentication-related and example pages</li> </ul>"},{"location":"#http-apis","title":"HTTP APIs","text":"<ul> <li>Django REST Framework for writing REST APIs with configured token authentication</li> <li>drf-spectacular for HTTP API documentation</li> <li>drf-standardized-errors for standardized API responses, including configuration for drf-spectacular</li> <li>django-cors-headers to allow cross-origin requests (restricted to HTTP API endpoints)</li> </ul>"},{"location":"#task-queue","title":"Task queue","text":"<ul> <li>huey for executing background and periodic tasks</li> <li>django-huey-monitor for monitoring huey task queue in Django admin</li> </ul>"},{"location":"#development-tools","title":"Development Tools","text":"<ul> <li>ruff for automatic code formatting, linting, and import sorting</li> <li>django-extensions for additional Django commands like <code>shell_plus</code></li> <li>django-browser-reload and django-watchfiles for auto reloading</li> <li>django-debug-toolbar for debugging</li> <li>django-silk for profiling requests and db queries</li> <li>snoop for ad-hoc debugging</li> <li>pre-commit hook</li> <li>bandit for finding security issues</li> <li>Logging with structlog via django-structlog</li> </ul>"},{"location":"#testing","title":"Testing","text":"<ul> <li>pytest test runner via pytest-django</li> <li>Useful pytest plugins like <code>pytest-sugar</code>, <code>pytest-icdiff</code>, <code>pytest-randomly</code>, <code>pytest-xdist</code>, <code>pytest-cov</code></li> <li>factoryboy for defining fixtures</li> <li>Faker for generating fake data</li> <li>Playwright for end-to-end UI testing</li> <li>openapi-spec-validator for validating the generated API specs</li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<ul> <li>Prepared deployment to a single Virtual Private Server (VPS) with reverse proxy and PostgreSQL database</li> <li>Ansible playbook that deploys the project in one go</li> <li>Fedora as the compatible operating system</li> <li>PostgreSQL as the database</li> <li>Caddy as the reverse proxy server</li> <li>gunicorn as the WSGI HTTP Server</li> <li><code>systemd</code> service</li> <li>Backup and restore commands</li> </ul>"},{"location":"howto/admin/","title":"Administration","text":"<p>Create a super user to administer the Django application:</p> <pre><code>uv run -- manage.py createsuperuser\n</code></pre> <p>You can then use Django admin at <code>&lt;site url&gt;/dj-admin/</code>, in development at <code>http://localhost:8000/dj-admin/</code>.</p>"},{"location":"howto/configuration/","title":"Configuration","text":"<p>Sidewinder is completely configured via environment variables with the help of django-environ.</p> <p>Start by creating <code>.env</code> file with your local settings in the project's root directory. You can begin by copying <code>.env-example</code>.</p>"},{"location":"howto/configuration/#env-file-config","title":".env file config","text":""},{"location":"howto/configuration/#secret-key","title":"Secret key","text":"<p>In production, make sure to set a unique secret key (doesn't matter for development):</p> <pre><code>DJANGO_SECRET_KEY=secretkey\n</code></pre>"},{"location":"howto/configuration/#debug-mode","title":"Debug mode","text":"<pre><code>DJANGO_DEBUG=1\nDJANGO_DEBUG_TOOLBAR=1\n</code></pre> <p>Set to <code>0</code> to disable debug mode.</p>"},{"location":"howto/configuration/#allowed-hosts","title":"Allowed hosts","text":"<pre><code>DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1\n</code></pre> <p>Add additional hosts as needed in production.</p>"},{"location":"howto/configuration/#ssl","title":"SSL","text":"<pre><code>DJANGO_SSL=0\n</code></pre> <p>Set to <code>1</code> in production to configure https.</p>"},{"location":"howto/configuration/#emails","title":"Emails","text":"<p>Replace values according to your email server:</p> <pre><code>DJANGO_SERVER_EMAIL=sidewinder@example.com\nDJANGO_EMAIL_HOST=example.emailprovider.com\nDJANGO_EMAIL_PORT=587\nDJANGO_EMAIL_HOST_USER=\nDJANGO_EMAIL_HOST_PASSWORD=\n</code></pre> <p>Info</p> <p>The default email server values from <code>.env-example</code> refer to the local Mailhog instance that you can use to check outgoing email in development environment. If you  want to test emails with MailHog you will need to set <code>SMTP_DEV=1</code> as env var and start local Mailhog with <code>docker compose up</code>.</p> <p>Replace to set default email prefix and origin address:</p> <pre><code>DJANGO_DEFAULT_FROM_EMAIL=sidewinder@example.com\nALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX=\n</code></pre> <p>Replace to use SMTP backend instead of Django console email backend in development:</p> <pre><code>SMTP_DEV=1\n</code></pre>"},{"location":"howto/configuration/#database","title":"Database","text":"<p>Set a connection string to SQLite or PostgreSQL database:</p> <pre><code>DJ_DATABASE_CONN_STRING=\n</code></pre> <p>Alternatively, create a <code>sidewinder</code> PostgreSQL database on the port <code>5432</code> with <code>postgres</code> user and <code>postgres</code> password, and make sure that the database is available for connections. Then use this example connection string:</p> <pre><code>DJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder\n</code></pre> <p>If you want to use GeoDjango, specify GeoDjango database backend:</p> <pre><code>DJANGO_DATABASE_BACKEND=django.contrib.gis.db.backends.postgis\n</code></pre> <p>Make sure that you have PostGIS installed and enabled in the database (<code>CREATE EXTENSION postgis;</code>).</p>"},{"location":"howto/configuration/#huey","title":"Huey","text":"<p>The task queue Huey can work without Redis in development. Set <code>HUEY_DEV=1</code> (default) to not use Redis in debug mode and <code>HUEY_DEV=0</code> otherwise.</p> <p>Note that when <code>HUEY_DEV</code> is <code>0</code>, it is necessary to have Redis running and configured on a local machine.</p>"},{"location":"howto/configuration/#redis","title":"Redis","text":"<p>Sidewinder uses Redis for background tasks in production and optionally during development.</p> <p>To configure Redis URL, use <code>REDIS_URL</code>:</p> <pre><code>REDIS_URL=redis://127.0.0.1:6379\n</code></pre> <p>This setting is optional if your Redis instance runs at <code>redis://127.0.0.1:6379</code>.</p>"},{"location":"howto/configuration/#admin-email-address","title":"Admin email address","text":"<p>Sidewinder can send some example email reports when <code>ADMIN_EMAIL</code> is set. This setting is optional, but it can be used to test that periodic tasks execute correctly after deployment.</p> <pre><code>ADMIN_EMAIL=youremail@example.com\n</code></pre>"},{"location":"howto/configuration/#complete-configuration","title":"Complete configuration","text":"<pre><code>DJANGO_SECRET_KEY=secretkey\nDJANGO_DEBUG=1\nDJANGO_DEBUG_TOOLBAR=1\nDJANGO_ALLOWED_HOSTS=localhost,127.0.0.1\nDJANGO_SSL=0\nDJANGO_SERVER_EMAIL=sidewinder@example.com\nDJANGO_EMAIL_HOST=example.emailprovider.com\nDJANGO_EMAIL_PORT=587\nDJANGO_EMAIL_HOST_USER=\nDJANGO_EMAIL_HOST_PASSWORD=\nDJANGO_DEFAULT_FROM_EMAIL=sidewinder@example.com\nALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX=\nDJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder\nREDIS_URL=redis://127.0.0.1:6379\nADMIN_EMAIL=youremail@example.com\nHUEY_DEV=1\n</code></pre>"},{"location":"howto/configuration/#rename-app-folder","title":"Rename app folder","text":"<p>The main application folder is called <code>appname</code>. To rename it, you will also need to find and replace references to <code>appname</code> in the repository.</p> <p>You can use these Bash commands in the root folder (replace <code>myapp</code> with your new name):</p> <pre><code>sed -i 's/appname\\./myapp\\./g' `grep 'appname\\.' -rl *`\nmv appname/ myapp/\n</code></pre> <p>Alternatively, find and replace <code>appname.</code> with <code>myapp.</code> in all project files in your editor of choice. Then rename the <code>appname</code> folder with <code>myapp</code>.</p>"},{"location":"howto/configuration/#verify-that-everything-works","title":"Verify that everything works","text":"<p>You can verify the configuration by running the project.</p>"},{"location":"howto/create-app/","title":"Creating a new Django app","text":"<p>Django apps make it possible to separate a Django project into multiple apps where each app can be dedicated to a different domain or other concern. Sidewinder comes with the <code>core</code>  Django application housing all the basic functionality in the kit but you are not limited to add more apps if you want to.</p> <p>Note</p> <p>This step is optional. Feel free to just use the <code>core</code> app if you don't want to separate the project into more apps.</p>"},{"location":"howto/create-app/#use-djangos-startapp-command","title":"Use Django's startapp command","text":"<p>If you want to add a new app to house your new application domain separated from core, start by creating the app's folder and invoking the standard Django command <code>startapp</code>:</p> <pre><code># inside virtual env in the project's root folder\n\nmkdir &lt;appsfolder&gt;/&lt;newappname&gt;\n./manage.py startapp &lt;newappname&gt; &lt;appsfolder&gt;/&lt;newappname&gt;\n</code></pre> <p><code>&lt;appsfolder&gt;</code> will be either <code>appname</code> if you didn't rename anything yet or your new name if you have already renamed the project. It should be the parent directory of the <code>core</code> folder (your new app will be a sibling to <code>core</code>). </p> <p><code>&lt;newappname&gt;</code> is how you want to name the new app.</p> <p>For example, if you followed the previous instructions to rename the <code>appname</code> to <code>school</code> and want to create a new app <code>administration</code> you would run <code>./manage.py startapp administration school/administration</code>.</p>"},{"location":"howto/create-app/#configuration","title":"Configuration","text":"<p>Additionaly we will need to make some adjustments to make the new app available.</p> <ol> <li>In the newly generated <code>&lt;appsfolder&gt;/&lt;newappname&gt;/apps.py</code> file change the value of <code>name</code> from <code>&lt;newappname&gt;</code> to <code>&lt;appsfolder&gt;.&lt;newappname&gt;</code>. For example from <code>administration</code> to <code>school.administration</code>.</li> <li>Include <code>\"&lt;appsfolder&gt;.&lt;newappname&gt;\"</code> in the <code>INSTALLED_APPS</code> list in the <code>&lt;appsfolder&gt;/settings.py</code>.</li> </ol> <p>Now you should be able to apply the new migrations as usual and use the new app.</p>"},{"location":"howto/deployment/","title":"Application deployment","text":"<p>If you haven't, make sure to provision the server first.</p> <p>The server provisioning from the previous step already deployed our first version of the application. However, for future deployments we don't want to run the whole provisioning playbook  (although it should be safe to do so with a small time window when the server won't be available to serve requests). For this purpose there is a separate Make target called <code>deploy</code>.</p>"},{"location":"howto/deployment/#deploy-command","title":"Deploy command","text":"<p>To deploy a master branch when application has been updated:</p> <pre><code>cd deployment/ansible\nmake deploy\n</code></pre> <p>Warning</p> <p>Any content you want to be deployed has to be pushed to the remote Git repository.</p>"},{"location":"howto/deployment/#deploying-a-specific-version","title":"Deploying a specific version","text":"<p>We can identify a specific application version using a git branch (like <code>master</code>), git tag (like <code>v1.0</code>), commit hash, or any other valid identifier. To deploy such specific application version we can set an environment variable called <code>APP_VERSION</code> to such identifier:</p> <pre><code># inside deployment/ansible \nAPP_VERSION=\"v1.0\" make deploy\n</code></pre>"},{"location":"howto/deployment/#considerations","title":"Considerations","text":"<p>Our Ansible playbook will push all new code to the server, run database migrations, and reloads or restarts services (see <code>deployment/ansible/provision.yml</code> for details). It is important that the new version of the application is compatible in the database schema and migration files with what is already in the database on the server. That means you shoudn't try to go back to previous versions and only move forward in your migrations.</p>"},{"location":"howto/frontend/","title":"Frontend","text":""},{"location":"howto/frontend/#basic-stylesheets-and-templates","title":"Basic stylesheets and templates","text":"<p>Sidewinder ships with simple CSS framework Pico that is easy to remove. You can remove the <code>&lt;link&gt;</code> tag in <code>templates/_base.html</code> to implement your own design.</p>"},{"location":"howto/installation/","title":"Installation","text":"<p>Info</p> <p>Sidewinder is set up as a template on GitHub which means you can easily create your own GitHub repository by clicking on the big green \"Use this template\" button on the repository homepage. This will ensure you have your own clean repository without previous commits and without any link to the original project.</p>"},{"location":"howto/installation/#clone-the-project-locally","title":"Clone the project locally","text":"<p>After you create your own GitHub repository from template or by forking the repository, clone it locally from your repository URL.</p> <p>Alternatively just clone the project directly from the main repo:</p> <pre><code>git clone https://github.com/stribny/sidewinder\n</code></pre>"},{"location":"howto/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Sidewinder, you will need the dependency manager uv to be installed in order to invoke the <code>uv</code> command.</p>"},{"location":"howto/installation/#installing-developer-tooling","title":"Installing developer tooling","text":"<p><code>uv</code> will automatically install all dependencies when <code>uv run</code> is executed. However, some development dependencies require specific installation instructions.</p> <p>Run the following commands in the project's root directory:</p> <pre><code># Install pre-commit hooks\nuv run -- pre-commit install\n\n# Install Playwright\n\nuv run -- playwright install\n</code></pre> <p>Now, configure the project.</p>"},{"location":"howto/provisioning/","title":"Server provisioning","text":"<p>This page explains how to get a virtual private server, configure it, and make your first application deployment.</p>"},{"location":"howto/provisioning/#get-a-vps","title":"Get a VPS","text":"<p>The first step is to get your own virtual private server. You can get one on Digital Ocean which can prepare a VPS with your public SSH key in place, so that you don't have to worry much about SSH configuration besides getting a public/private key pair. As the operating system, choose Fedora.</p> <p>You can support Sidewinder by signing up with the affiliate link below (you will get $200 credit you can use in 60 days):</p> <p></p> <p>Sidewinder is prepared to be deployed to a VPS that has a static IP address, but also to a custom domain with https. In that case, you will also need to register a domain and point it your VPS.</p> <p>Before proceeding, make sure that you have a running private virtual server that you can access with <code>SSH</code>.</p> <p>Warning</p> <p>Sidewinder is prepared to be run on Fedora operating system. When creating your VPS, make sure you choose Fedora Linux distribution as your OS.</p>"},{"location":"howto/provisioning/#install-ansible","title":"Install Ansible","text":"<p>The next step is to install Ansible.</p>"},{"location":"howto/provisioning/#configure-hostsini","title":"Configure hosts.ini","text":"<p>Copy <code>deployment/ansible/hosts.ini</code> to  <code>deployment/ansible/myhosts.ini</code> and set <code>ansible_user</code> to be the name of your server account (like <code>root</code>) and set <code>ansible_host</code> to the IP address of your server.</p> <p>Example:</p> <pre><code>[all]\nhost_name ansible_user=root   ansible_host=29.38.208.180\n</code></pre>"},{"location":"howto/provisioning/#configure-varsyml","title":"Configure vars.yml","text":"<p>Now it's time to configure your server settings. Copy <code>deployment/ansible/vars.yml</code> to <code>deployment/ansible/myvars.yml</code>. You might eventually want to configure each property in the file for your production server.</p> <p>At the minimum to run a successful test deployment you will need to change:</p> <ul> <li><code>project_name</code> to be the name of your application, website or app, e.g. <code>My website</code></li> <li><code>domain_name</code> to point to the server's IP address or your domain, e.g. <code>example.com</code></li> <li><code>git_url</code> to your repository fork of Sidewinder, e.g. <code>git@github.com:name/mywebsite.git</code></li> <li><code>git_key_file</code> to point to your private SSH key file on a local system, e.g. <code>/home/user/.ssh/id_rsa</code></li> <li><code>django_ssl</code> set to <code>1</code> if you are using a domain (<code>0</code> otherwise)</li> </ul> <p>You should also change all passwords and secrets:</p> <ul> <li><code>django_secret_key</code></li> </ul> <p>And set email server settings:</p> <ul> <li><code>django_default_from_email</code>, e.g. <code>hi@example.com</code></li> <li><code>django_server_email</code>, e.g. <code>admin@example.com</code></li> <li><code>django_email_host</code>, e.g. <code>smtp-relay.example.com</code></li> <li><code>django_email_port</code>, e.g. <code>587</code></li> <li><code>django_email_host_user</code></li> <li><code>django_email_host_password</code></li> <li><code>admin_email</code>, e.g. <code>admin@example.com</code></li> </ul> <p>Other variables like <code>project_user</code>, <code>app_name</code>, <code>db_name</code> will be used to configure user, app and db names on the server. If you don't plan to use the VPS for other purposes (recommended) or you are not familiar with restrictions on these names, it might be better not to set different values.</p> <p>Warning</p> <p>It is important to point <code>git_url</code> to your repository and to commit and push all application changes you have made to the repository. That's because our deployment Ansible playbook will download and deploy the exact version of the application that will be at the <code>git_url</code>.</p>"},{"location":"howto/provisioning/#run-ansible-playbook","title":"Run Ansible playbook","text":"<p>The provided Ansible playbook will download a copy of your Git repository and deploy the last committed version from the <code>master</code> branch to the specified server. Everything that you want to deploy needs to be pushed to your remote Git repository.</p> <pre><code>cd deployment/ansible\nmake provision\n</code></pre> <p>Warning</p> <p>You need to be able to run <code>Makefile</code> files on your operating system using the <code>make</code> command.</p> <p>Wait until the deployment is finished.</p> <p>You can verify it by visiting your domain on https or your IP address on http in your browser.</p> <p>Tip</p> <p>Consider using Mitogen for Ansible to make Ansible faster.</p>"},{"location":"howto/provisioning/#create-a-superuser","title":"Create a superuser","text":"<p>If the server is up and running we can create our server superuser:</p> <pre><code># inside deployment/ansible\nmake createsuperuser\n</code></pre>"},{"location":"howto/provisioning/#final-steps","title":"Final steps","text":"<p>Now log in to your Django admin at <code>ipaddress-or-domain/dj-admin/</code> and check that everything works.</p>"},{"location":"howto/run/","title":"Start Sidewinder","text":"<p>If this is the first time, don't forget to run Django's <code>migrate</code> management command before starting the server:</p> <pre><code>uv run -- manage.py migrate\n</code></pre> <p>You can then start the development web server:</p> <pre><code>uv run -- manage.py runserver\n</code></pre>"},{"location":"howto/server-management/","title":"Server management","text":"<p>There are some neat commands in the provided <code>deployment/ansible/Makefile</code> that you can run to help you manage your new server:</p> <p>Warning</p> <p>Make sure you configured everything first (see server provisioning).</p> <ul> <li><code>make provision</code> - Provisions a VPS from scratch (use <code>APP_VERSION</code> env var for a specific version)</li> <li><code>make deploy</code> - Deploys a new application version (use <code>APP_VERSION</code> env var for a specific version)</li> <li><code>make login</code> - Gives you a remote SSH shell to your server</li> <li><code>make status</code> - Gives you status of all important services running (application, database, Redis, queue, webserver)</li> <li><code>make dbshell</code> - Gives you a remote database shell to your database server</li> <li><code>make appservicelog</code> - Prints the last application service logs</li> <li><code>make queueservicelog</code>- Prints the last queue service logs</li> <li><code>make webserverservicelog</code>- Prints the last web server service logs</li> <li><code>make webserveraccesslog</code> - Prints the last web server access logs</li> <li><code>make monitor</code> - Starts a system monitor on the server (to check on system usage like memory, disk, CPU, etc.)</li> <li><code>make createsuperuser</code> - Creates a superuser on the server</li> <li><code>make upgrade</code> - Updates all operating system packages and restarts the server</li> <li><code>make dbbackup</code> - Creates a new db backup</li> <li><code>make dbrestore</code> - Restores the last db backup</li> <li><code>make mediabackup</code> - Creates a new media backup</li> <li><code>make mediarestore</code> - Restores the last media backup</li> <li><code>make listbackups</code> - Lists available backups</li> </ul>"},{"location":"howto/testing/","title":"Testing","text":"<p>Sidewinder comes with a small test suite that provides examples for writing unit tests, HTTP API tests, and UI tests.</p>"},{"location":"howto/testing/#run-tests","title":"Run tests","text":"<p>By default, pytest is configured to run tests without end-to-end UI tests:</p> <pre><code>uv run -- pytest\n</code></pre>"},{"location":"howto/testing/#run-ui-tests","title":"Run UI tests","text":"<pre><code>uv run -- pytest -m ui\n</code></pre>"},{"location":"reference/commands/","title":"Commands","text":""},{"location":"reference/commands/#django","title":"Django","text":"<p>You can display all available commands from all Django apps using <code>uv run -- manage.py</code>. Refer to Django and each Django app documentation for more information.</p> <p>Some useful commands:</p> <ul> <li><code>uv run -- manage.py runserver</code> - Starts Django development server</li> <li><code>uv run -- manage.py fresh</code> - Resets the database and creates a superuser (see <code>fresh.py</code>)</li> <li><code>uv run -- manage.py makemigrations</code> - Generates migrations based on model changes</li> <li><code>uv run -- manage.py migrate</code> - Runs unapplied migrations (syncs the database schema after generating new migration files)</li> <li><code>uv run -- manage.py sqlmigrate &lt;appname&gt; &lt;migrationfilename&gt;</code> - Examines a migration file by showing what the generated SQL looks like</li> <li><code>uv run -- manage.py sh</code> - Starts enhanced Python shell with auto-imported models and Django context (IPython is default in Sidewinder)</li> <li><code>uv run -- manage.py dbshell</code> - Starts db shell (like PostgreSQL's psql)</li> <li><code>uv run -- manage.py run_huey</code> - Starts Huey consumers (this way you can test huey consumers using Redis locally)</li> <li><code>uv run -- manage.py print_settings</code> - Prints all Django settings</li> <li><code>uv run -- manage.py diffsettings</code> - See all Django settings that differ from Django's defaults</li> <li><code>uv run -- manage.py show_urls</code> - Shows all urlpatterns</li> <li><code>uv run -- manage.py show_template_tags</code> - Displays template tags and filters available in the current project</li> <li><code>uv run -- manage.py list_signals</code> - Prints all defined Django signals</li> <li><code>uv run -- manage.py list_model_info</code> - Prints all models, their attributes and methods</li> <li><code>uv run -- manage.py notes</code> - Shows all annotations like TODO, FIXME, BUG, HACK, WARNING, NOTE or XXX in the py and HTML files</li> <li><code>uv run -- manage.py inspectdb</code> - Generates Django models from the database</li> <li><code>uv run -- manage.py spectacular</code> - Prints generated OpenAPI schema</li> <li><code>uv run -- manage.py startapp &lt;name&gt; &lt;projectname&gt;/&lt;name&gt;</code> - Creates a new Django app inside \"projectname\" folder (what you chose for renaming the project)</li> <li><code>uv run -- manage.py createsuperuser</code> - Creates a new super user</li> <li><code>uv run -- manage.py changepassword &lt;username&gt;</code> - Changes a password for a given user</li> <li><code>uv run -- manage.py generate_secret_key</code> - Generates Django secret key (useful when needing one for production)</li> <li><code>uv run -- manage.py admin_generator &lt;appname&gt;</code> - Generates the contents of admin.py for a given Django app</li> <li><code>uv run -- manage.py describe_form &lt;appname.ModelName&gt;</code> - Generates Django form based on a model</li> <li><code>uv run -- manage.py drf_create_token &lt;username&gt;</code> - Generates an API token for a given user</li> <li><code>uv run -- manage.py makemessages --locale=&lt;locale&gt;</code> (or <code>--all</code>) - Creates or updates messages files for translations</li> <li><code>uv run -- manage.py compilemessages</code> - Compiles .po files created by makemessages to .mo files</li> <li><code>uv run -- manage.py clear_cache</code> - Clears Django cache</li> <li><code>uv run -- manage.py clean_pyc</code> - Removes .pyc files from the project</li> <li><code>uv run -- manage.py check</code> - Runs Django check list</li> <li><code>uv run -- manage.py validate_templates</code> - Validates Django templates</li> <li><code>uv run -- manage.py unreferenced_files</code> - Lists media files that are not referenced anymore by file fields</li> <li><code>uv run -- manage.py sendtestemail &lt;email@address&gt;</code> - Sends a test email to the provided email address</li> <li><code>uv run -- manage.py raise_test_exception</code> - Raises a test exception. Useful for testing error reporters such as Sentry</li> </ul>"},{"location":"reference/commands/#documentation","title":"Documentation","text":"<p>Feel free to modify Sidewinder's documentation site in the <code>docs</code> folder for your needs.</p> <ul> <li><code>uv run -- mkdocs serve</code> - Start the live-reloading docs server</li> <li><code>uv run -- mkdocs build</code> - Build the documentation site</li> </ul>"}]}