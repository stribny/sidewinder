{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sidewinder Sidewinder is an open-source Django starter kit that focuses on good defaults, developer experience, and deployment. Also, a snake . You can start a new Django project without worrying about the correct project structure, or what development and testing tools to install and how to configure them. You can also deploy your new project right away with provided Ansible playbook in a few minutes. Warning Sidewinder is under development. Follow @stribny for updates. Philosophy Sidewinder is opinionated to provide smooth experience from starting a new project to deploying it on a single Virtual Private Server (VPS). It is ideal for indie hackers, educators, students and the like. Main features Configuration Good default project structure Dependency management with Poetry that makes it straightforward to manage virtual environments Project configuration via environment variables thanks to django-environ Authentication Custom User model to allow future extensibility Configured django-allauth for email login and easy extensibility Frontend Custom Bulma build to completely customize with Saas Authentication-related pages styled for the use with django-allauth Configured htmx for smoother frontend interactions HTTP APIs Django REST Framework for writing REST APIs with configured token authentication drf-spectacular for HTTP API documentation Testing pytest test runner via pytest-django factoryboy for defining fixtures Faker for generating fake data Playwright for end-to-end UI testing Development Tools django-debug-toolbar for debugging django-silk for profiling requests and db queries snoop for ad-hoc debugging Black for automatic code formatting flake8 linter isort for sorting imports pre-commit hook configured with Black, Flake8, and isort Logging with structlog via django-structlog Deployment Prepared deployment to a single Virtual Private Server (VPS) with reverse proxy and PostgreSQL database Ansible playbook that deploys the project in one go Fedora as the compatible operating system PostgreSQL as the database Caddy as the reverse proxy server gunicorn as the WSGI HTTP Server systemd service","title":"Introduction"},{"location":"#sidewinder","text":"Sidewinder is an open-source Django starter kit that focuses on good defaults, developer experience, and deployment. Also, a snake . You can start a new Django project without worrying about the correct project structure, or what development and testing tools to install and how to configure them. You can also deploy your new project right away with provided Ansible playbook in a few minutes. Warning Sidewinder is under development. Follow @stribny for updates.","title":"Sidewinder"},{"location":"#philosophy","text":"Sidewinder is opinionated to provide smooth experience from starting a new project to deploying it on a single Virtual Private Server (VPS). It is ideal for indie hackers, educators, students and the like.","title":"Philosophy"},{"location":"#main-features","text":"","title":"Main features"},{"location":"#configuration","text":"Good default project structure Dependency management with Poetry that makes it straightforward to manage virtual environments Project configuration via environment variables thanks to django-environ","title":"Configuration"},{"location":"#authentication","text":"Custom User model to allow future extensibility Configured django-allauth for email login and easy extensibility","title":"Authentication"},{"location":"#frontend","text":"Custom Bulma build to completely customize with Saas Authentication-related pages styled for the use with django-allauth Configured htmx for smoother frontend interactions","title":"Frontend"},{"location":"#http-apis","text":"Django REST Framework for writing REST APIs with configured token authentication drf-spectacular for HTTP API documentation","title":"HTTP APIs"},{"location":"#testing","text":"pytest test runner via pytest-django factoryboy for defining fixtures Faker for generating fake data Playwright for end-to-end UI testing","title":"Testing"},{"location":"#development-tools","text":"django-debug-toolbar for debugging django-silk for profiling requests and db queries snoop for ad-hoc debugging Black for automatic code formatting flake8 linter isort for sorting imports pre-commit hook configured with Black, Flake8, and isort Logging with structlog via django-structlog","title":"Development Tools"},{"location":"#deployment","text":"Prepared deployment to a single Virtual Private Server (VPS) with reverse proxy and PostgreSQL database Ansible playbook that deploys the project in one go Fedora as the compatible operating system PostgreSQL as the database Caddy as the reverse proxy server gunicorn as the WSGI HTTP Server systemd service","title":"Deployment"},{"location":"howto/admin/","text":"Administration Create a super user to administer the Django application: # inside project root poetry shell # inside virtual environment ./manage.py createsuperuser You can then use Django admin at <site url>/dj-admin/ , in development at http://localhost:8000/dj-admin/ .","title":"Administration"},{"location":"howto/admin/#administration","text":"Create a super user to administer the Django application: # inside project root poetry shell # inside virtual environment ./manage.py createsuperuser You can then use Django admin at <site url>/dj-admin/ , in development at http://localhost:8000/dj-admin/ .","title":"Administration"},{"location":"howto/configuration/","text":"Configuration Sidewinder is completely configured via environment variables with the help of django-environ . Start by creating .env file with your local settings in the project's root directory. You can begin by copying .env-example . .env file config Secret key In production, make sure to set a unique secret key (doesn't matter for development): DJANGO_SECRET_KEY = secretkey Debug mode DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 Set to 0 to disable debug mode. Allowed hosts DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 Add additional hosts as needed in production. SSL DJANGO_SSL = 0 Set to 1 in production to configure https. Emails Replace values according to your email server: DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = Replace to set default email prefix and origin address: DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = Database Set a connection string to SQLite or PostgreSQL database: DJ_DATABASE_CONN_STRING = Alternatively, create a sidewinder PostgreSQL database on the port 5432 with postgres user and postgres password, and make sure that the database is available for connections. Then use this example connection string: DJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder Complete configuration DJANGO_SECRET_KEY = secretkey DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 DJANGO_SSL = 0 DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = DJ_DATABASE_CONN_STRING = postgres://postgres:postgres@localhost:5432/sidewinder Rename app folder The main application folder is called appname . To rename it, you will also need to find and replace references to appname in the repository. Verify that everything works You can verify the configuration by running the project .","title":"Configuration"},{"location":"howto/configuration/#configuration","text":"Sidewinder is completely configured via environment variables with the help of django-environ . Start by creating .env file with your local settings in the project's root directory. You can begin by copying .env-example .","title":"Configuration"},{"location":"howto/configuration/#env-file-config","text":"","title":".env file config"},{"location":"howto/configuration/#secret-key","text":"In production, make sure to set a unique secret key (doesn't matter for development): DJANGO_SECRET_KEY = secretkey","title":"Secret key"},{"location":"howto/configuration/#debug-mode","text":"DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 Set to 0 to disable debug mode.","title":"Debug mode"},{"location":"howto/configuration/#allowed-hosts","text":"DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 Add additional hosts as needed in production.","title":"Allowed hosts"},{"location":"howto/configuration/#ssl","text":"DJANGO_SSL = 0 Set to 1 in production to configure https.","title":"SSL"},{"location":"howto/configuration/#emails","text":"Replace values according to your email server: DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = Replace to set default email prefix and origin address: DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX =","title":"Emails"},{"location":"howto/configuration/#database","text":"Set a connection string to SQLite or PostgreSQL database: DJ_DATABASE_CONN_STRING = Alternatively, create a sidewinder PostgreSQL database on the port 5432 with postgres user and postgres password, and make sure that the database is available for connections. Then use this example connection string: DJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder","title":"Database"},{"location":"howto/configuration/#complete-configuration","text":"DJANGO_SECRET_KEY = secretkey DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 DJANGO_SSL = 0 DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = DJ_DATABASE_CONN_STRING = postgres://postgres:postgres@localhost:5432/sidewinder","title":"Complete configuration"},{"location":"howto/configuration/#rename-app-folder","text":"The main application folder is called appname . To rename it, you will also need to find and replace references to appname in the repository.","title":"Rename app folder"},{"location":"howto/configuration/#verify-that-everything-works","text":"You can verify the configuration by running the project .","title":"Verify that everything works"},{"location":"howto/deployment/","text":"Deployment Warning Deployment documentation is not ready yet, but feel free to check the deployment folder for the Ansible playbooks.","title":"Deployment"},{"location":"howto/deployment/#deployment","text":"Warning Deployment documentation is not ready yet, but feel free to check the deployment folder for the Ansible playbooks.","title":"Deployment"},{"location":"howto/installation/","text":"Installation Info There is currently no project generator. To start using Sidewinder, clone the repository and make configuration changes in your local copy. Clone the repository Tip Feel free to fork the repository first so that you don't have to set up Git remotes later. You can clone Sidewinder from the official repository or your fork: git clone https://github.com/stribny/sidewinder Prerequisites Install Python 3.9+ Before installing Sidewinder, you will need Python 3.9 and Poetry dependency manager. Install Poetry You can install Poetry with pip : pip install poetry Install watchman For fast hot-reloading, make sure to install watchman . Install graphviz (optional) Graphviz is needed by django-extensions for generating model diagrams. You will need to figure out how to install it for your system. On Fedora, use dnf : dnf install graphviz graphviz-devel You can also skip this step if you don't plan to use this feature. To do so, ignore the --all-extras in the following step. Install Sidewinder You can now install Sidewinder from the project's root: poetry install --all-extras # install pre-commit hooks poetry run pre-commit install From this point onwards, all commands should be run inside the created virtual environment. You can switch to the virtual environment with: poetry shell Install Playwright # inside virtual environment playwright install Install Bulma cd assets npm i npm run build-bulma Now, configure the project .","title":"Installation"},{"location":"howto/installation/#installation","text":"Info There is currently no project generator. To start using Sidewinder, clone the repository and make configuration changes in your local copy.","title":"Installation"},{"location":"howto/installation/#clone-the-repository","text":"Tip Feel free to fork the repository first so that you don't have to set up Git remotes later. You can clone Sidewinder from the official repository or your fork: git clone https://github.com/stribny/sidewinder","title":"Clone the repository"},{"location":"howto/installation/#prerequisites","text":"","title":"Prerequisites"},{"location":"howto/installation/#install-python-39","text":"Before installing Sidewinder, you will need Python 3.9 and Poetry dependency manager.","title":"Install Python 3.9+"},{"location":"howto/installation/#install-poetry","text":"You can install Poetry with pip : pip install poetry","title":"Install Poetry"},{"location":"howto/installation/#install-watchman","text":"For fast hot-reloading, make sure to install watchman .","title":"Install watchman"},{"location":"howto/installation/#install-graphviz-optional","text":"Graphviz is needed by django-extensions for generating model diagrams. You will need to figure out how to install it for your system. On Fedora, use dnf : dnf install graphviz graphviz-devel You can also skip this step if you don't plan to use this feature. To do so, ignore the --all-extras in the following step.","title":"Install graphviz (optional)"},{"location":"howto/installation/#install-sidewinder","text":"You can now install Sidewinder from the project's root: poetry install --all-extras # install pre-commit hooks poetry run pre-commit install From this point onwards, all commands should be run inside the created virtual environment. You can switch to the virtual environment with: poetry shell","title":"Install Sidewinder"},{"location":"howto/installation/#install-playwright","text":"# inside virtual environment playwright install","title":"Install Playwright"},{"location":"howto/installation/#install-bulma","text":"cd assets npm i npm run build-bulma Now, configure the project .","title":"Install Bulma"},{"location":"howto/run/","text":"Start Sidewinder You can run the development server inside the Poetry's virtual environment: # inside project root poetry shell # inside virtual environment ./manage.py runserver","title":"Run the project"},{"location":"howto/run/#start-sidewinder","text":"You can run the development server inside the Poetry's virtual environment: # inside project root poetry shell # inside virtual environment ./manage.py runserver","title":"Start Sidewinder"},{"location":"howto/testing/","text":"Testing Sidewinder comes with a small test suite that provides examples for writing unit tests, API tests, and UI tests. Run tests By default, pytest is configured to run tests without end-to-end UI tests: # inside project root poetry shell # inside virtual environment pytest Run UI tests pytest -k \"ui\"","title":"Testing"},{"location":"howto/testing/#testing","text":"Sidewinder comes with a small test suite that provides examples for writing unit tests, API tests, and UI tests.","title":"Testing"},{"location":"howto/testing/#run-tests","text":"By default, pytest is configured to run tests without end-to-end UI tests: # inside project root poetry shell # inside virtual environment pytest","title":"Run tests"},{"location":"howto/testing/#run-ui-tests","text":"pytest -k \"ui\"","title":"Run UI tests"},{"location":"reference/commands/","text":"Commands Warning This page is under construction. All commands here should be run inside the Poetry's virtual environment. Documentation Feel free to modify Sidewinder's documentation site in the docs folder for your needs. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site.","title":"Commands"},{"location":"reference/commands/#commands","text":"Warning This page is under construction. All commands here should be run inside the Poetry's virtual environment.","title":"Commands"},{"location":"reference/commands/#documentation","text":"Feel free to modify Sidewinder's documentation site in the docs folder for your needs. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site.","title":"Documentation"}]}