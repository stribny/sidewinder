{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sidewinder Sidewinder is an open-source Django starter kit that focuses on good defaults, developer experience, and deployment. Also, a snake . You can start a new Django project without worrying about the correct project structure, or what development and testing tools to install and how to configure them. You can also deploy your new project right away with provided Ansible playbook in a few minutes. Philosophy Sidewinder is opinionated to provide smooth experience from starting a new project to deploying it on a single Virtual Private Server (VPS). It is ideal for indie hackers, educators, students and the like. Main features Configuration Good default project structure Dependency management with Poetry that makes it straightforward to manage virtual environments Project configuration via environment variables thanks to django-environ Authentication Custom User model to allow future extensibility Configured django-allauth for email login and 3rd party authentication Stronger password hashing with argon2-cffi Frontend It is expected that you bring your own CSS/CSS framework Basic one-file CSS is included to style authentication-related and example pages Configured htmx for smoother frontend interactions HTTP APIs Django REST Framework for writing REST APIs with configured token authentication drf-spectacular for HTTP API documentation drf-standardized-errors for standardized API responses, including configuration for drf-spectacular django-cors-headers to allow cross-origin requests (restricted to HTTP API endpoints) Task queue huey for executing background and periodic tasks Development Tools django-extensions for additional Django commands like shell_plus django-browser-reload and pywatchman for auto reloading django-debug-toolbar for debugging django-silk for profiling requests and db queries snoop for ad-hoc debugging Black for automatic code formatting flake8 linter isort for sorting imports pre-commit hook configured with Black, Flake8, and isort bandit for finding security issues Logging with structlog via django-structlog Testing pytest test runner via pytest-django Useful pytest plugins like pytest-sugar , pytest-icdiff , pytest-randomly , pytest-cov factoryboy for defining fixtures Faker for generating fake data Playwright for end-to-end UI testing openapi-spec-validator for validating the generated API specs Deployment Prepared deployment to a single Virtual Private Server (VPS) with reverse proxy and PostgreSQL database Ansible playbook that deploys the project in one go Fedora as the compatible operating system PostgreSQL as the database Caddy as the reverse proxy server gunicorn as the WSGI HTTP Server systemd service","title":"Introduction"},{"location":"#sidewinder","text":"Sidewinder is an open-source Django starter kit that focuses on good defaults, developer experience, and deployment. Also, a snake . You can start a new Django project without worrying about the correct project structure, or what development and testing tools to install and how to configure them. You can also deploy your new project right away with provided Ansible playbook in a few minutes.","title":"Sidewinder"},{"location":"#philosophy","text":"Sidewinder is opinionated to provide smooth experience from starting a new project to deploying it on a single Virtual Private Server (VPS). It is ideal for indie hackers, educators, students and the like.","title":"Philosophy"},{"location":"#main-features","text":"","title":"Main features"},{"location":"#configuration","text":"Good default project structure Dependency management with Poetry that makes it straightforward to manage virtual environments Project configuration via environment variables thanks to django-environ","title":"Configuration"},{"location":"#authentication","text":"Custom User model to allow future extensibility Configured django-allauth for email login and 3rd party authentication Stronger password hashing with argon2-cffi","title":"Authentication"},{"location":"#frontend","text":"It is expected that you bring your own CSS/CSS framework Basic one-file CSS is included to style authentication-related and example pages Configured htmx for smoother frontend interactions","title":"Frontend"},{"location":"#http-apis","text":"Django REST Framework for writing REST APIs with configured token authentication drf-spectacular for HTTP API documentation drf-standardized-errors for standardized API responses, including configuration for drf-spectacular django-cors-headers to allow cross-origin requests (restricted to HTTP API endpoints)","title":"HTTP APIs"},{"location":"#task-queue","text":"huey for executing background and periodic tasks","title":"Task queue"},{"location":"#development-tools","text":"django-extensions for additional Django commands like shell_plus django-browser-reload and pywatchman for auto reloading django-debug-toolbar for debugging django-silk for profiling requests and db queries snoop for ad-hoc debugging Black for automatic code formatting flake8 linter isort for sorting imports pre-commit hook configured with Black, Flake8, and isort bandit for finding security issues Logging with structlog via django-structlog","title":"Development Tools"},{"location":"#testing","text":"pytest test runner via pytest-django Useful pytest plugins like pytest-sugar , pytest-icdiff , pytest-randomly , pytest-cov factoryboy for defining fixtures Faker for generating fake data Playwright for end-to-end UI testing openapi-spec-validator for validating the generated API specs","title":"Testing"},{"location":"#deployment","text":"Prepared deployment to a single Virtual Private Server (VPS) with reverse proxy and PostgreSQL database Ansible playbook that deploys the project in one go Fedora as the compatible operating system PostgreSQL as the database Caddy as the reverse proxy server gunicorn as the WSGI HTTP Server systemd service","title":"Deployment"},{"location":"howto/admin/","text":"Administration Create a super user to administer the Django application: # inside project root poetry shell # inside virtual environment ./manage.py createsuperuser You can then use Django admin at <site url>/dj-admin/ , in development at http://localhost:8000/dj-admin/ .","title":"Administration"},{"location":"howto/admin/#administration","text":"Create a super user to administer the Django application: # inside project root poetry shell # inside virtual environment ./manage.py createsuperuser You can then use Django admin at <site url>/dj-admin/ , in development at http://localhost:8000/dj-admin/ .","title":"Administration"},{"location":"howto/configuration/","text":"Configuration Sidewinder is completely configured via environment variables with the help of django-environ . Start by creating .env file with your local settings in the project's root directory. You can begin by copying .env-example . .env file config Secret key In production, make sure to set a unique secret key (doesn't matter for development): DJANGO_SECRET_KEY = secretkey Debug mode DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 Set to 0 to disable debug mode. Allowed hosts DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 Add additional hosts as needed in production. SSL DJANGO_SSL = 0 Set to 1 in production to configure https. Emails Replace values according to your email server: DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = Info The default email server values from .env-example refer to the local Mailhog instance that you can use to check outgoing email in development environment. If you want to test emails with MailHog you will need to set SMTP_DEV=1 as env var and start local Mailhog with docker compose up . Replace to set default email prefix and origin address: DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = Replace to use SMTP backend instead of Django console email backend in development: SMTP_DEV = 1 Database Set a connection string to SQLite or PostgreSQL database: DJ_DATABASE_CONN_STRING = Alternatively, create a sidewinder PostgreSQL database on the port 5432 with postgres user and postgres password, and make sure that the database is available for connections. Then use this example connection string: DJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder Huey The task queue Huey can work without Redis in development. Set HUEY_DEV=1 (default) to not use Redis in debug mode and HUEY_DEV=0 otherwise. Note that when HUEY_DEV is 0 , it is necessary to have Redis running and configured on a local machine. Redis Sidewinder uses Redis for background tasks in production and optionally during development. To configure Redis URL, use REDIS_URL : REDIS_URL = redis://127.0.0.1:6379 This setting is optional if your Redis instance runs at redis://127.0.0.1:6379 . Admin email address Sidewinder can send some example email reports when ADMIN_EMAIL is set. This setting is optional, but it can be used to test that periodic tasks execute correctly after deployment. ADMIN_EMAIL = youremail@example.com Complete configuration DJANGO_SECRET_KEY = secretkey DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 DJANGO_SSL = 0 DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = DJ_DATABASE_CONN_STRING = postgres://postgres:postgres@localhost:5432/sidewinder REDIS_URL = redis://127.0.0.1:6379 ADMIN_EMAIL = youremail@example.com HUEY_DEV = 1 Rename app folder The main application folder is called appname . To rename it, you will also need to find and replace references to appname in the repository. You can use these Bash commands in the root folder (replace myapp with your new name): sed -i 's/appname\\./myapp\\./g' ` grep 'appname\\.' -rl * ` mv appname/ myapp/ Alternatively, find and replace appname. with myapp. in all project files in your editor of choice. Then rename the appname folder with myapp . Verify that everything works You can verify the configuration by running the project .","title":"Configuration"},{"location":"howto/configuration/#configuration","text":"Sidewinder is completely configured via environment variables with the help of django-environ . Start by creating .env file with your local settings in the project's root directory. You can begin by copying .env-example .","title":"Configuration"},{"location":"howto/configuration/#env-file-config","text":"","title":".env file config"},{"location":"howto/configuration/#secret-key","text":"In production, make sure to set a unique secret key (doesn't matter for development): DJANGO_SECRET_KEY = secretkey","title":"Secret key"},{"location":"howto/configuration/#debug-mode","text":"DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 Set to 0 to disable debug mode.","title":"Debug mode"},{"location":"howto/configuration/#allowed-hosts","text":"DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 Add additional hosts as needed in production.","title":"Allowed hosts"},{"location":"howto/configuration/#ssl","text":"DJANGO_SSL = 0 Set to 1 in production to configure https.","title":"SSL"},{"location":"howto/configuration/#emails","text":"Replace values according to your email server: DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = Info The default email server values from .env-example refer to the local Mailhog instance that you can use to check outgoing email in development environment. If you want to test emails with MailHog you will need to set SMTP_DEV=1 as env var and start local Mailhog with docker compose up . Replace to set default email prefix and origin address: DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = Replace to use SMTP backend instead of Django console email backend in development: SMTP_DEV = 1","title":"Emails"},{"location":"howto/configuration/#database","text":"Set a connection string to SQLite or PostgreSQL database: DJ_DATABASE_CONN_STRING = Alternatively, create a sidewinder PostgreSQL database on the port 5432 with postgres user and postgres password, and make sure that the database is available for connections. Then use this example connection string: DJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder","title":"Database"},{"location":"howto/configuration/#huey","text":"The task queue Huey can work without Redis in development. Set HUEY_DEV=1 (default) to not use Redis in debug mode and HUEY_DEV=0 otherwise. Note that when HUEY_DEV is 0 , it is necessary to have Redis running and configured on a local machine.","title":"Huey"},{"location":"howto/configuration/#redis","text":"Sidewinder uses Redis for background tasks in production and optionally during development. To configure Redis URL, use REDIS_URL : REDIS_URL = redis://127.0.0.1:6379 This setting is optional if your Redis instance runs at redis://127.0.0.1:6379 .","title":"Redis"},{"location":"howto/configuration/#admin-email-address","text":"Sidewinder can send some example email reports when ADMIN_EMAIL is set. This setting is optional, but it can be used to test that periodic tasks execute correctly after deployment. ADMIN_EMAIL = youremail@example.com","title":"Admin email address"},{"location":"howto/configuration/#complete-configuration","text":"DJANGO_SECRET_KEY = secretkey DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 DJANGO_SSL = 0 DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = DJ_DATABASE_CONN_STRING = postgres://postgres:postgres@localhost:5432/sidewinder REDIS_URL = redis://127.0.0.1:6379 ADMIN_EMAIL = youremail@example.com HUEY_DEV = 1","title":"Complete configuration"},{"location":"howto/configuration/#rename-app-folder","text":"The main application folder is called appname . To rename it, you will also need to find and replace references to appname in the repository. You can use these Bash commands in the root folder (replace myapp with your new name): sed -i 's/appname\\./myapp\\./g' ` grep 'appname\\.' -rl * ` mv appname/ myapp/ Alternatively, find and replace appname. with myapp. in all project files in your editor of choice. Then rename the appname folder with myapp .","title":"Rename app folder"},{"location":"howto/configuration/#verify-that-everything-works","text":"You can verify the configuration by running the project .","title":"Verify that everything works"},{"location":"howto/create-app/","text":"Creating a new Django app Django apps make it possible to separate a Django project into multiple apps where each app can be dedicated to a different domain or other concern. Sidewinder comes with the core Django application housing all the basic functionality in the kit but you are not limited to add more apps if you want to. Note This step is optional. Feel free to just use the core app if you don't want to separate the project into more apps. Use Django's startapp command If you want to add a new app to house your new application domain separated from core, start by creating the app's folder and invoking the standard Django command startapp : # inside virtual env in the project's root folder mkdir <appsfolder>/<newappname> ./manage.py startapp <newappname> <appsfolder>/<newappname> <appsfolder> will be either appname if you didn't rename anything yet or your new name if you have already renamed the project. It should be the parent directory of the core folder (your new app will be a sibling to core ). <newappname> is how you want to name the new app. For example, if you followed the previous instructions to rename the appname to school and want to create a new app administration you would run ./manage.py startapp administration school/administration . Configuration Additionaly we will need to make some adjustments to make the new app available. In the newly generated <appsfolder>/<newappname>/apps.py file change the value of name from <newappname> to <appsfolder>.<newappname> . For example from administration to school.administration . Include \"<appsfolder>.<newappname>\" in the INSTALLED_APPS list in the <appsfolder>/settings.py . Now you should be able to apply the new migrations as usual and use the new app.","title":"Create a Django app"},{"location":"howto/create-app/#creating-a-new-django-app","text":"Django apps make it possible to separate a Django project into multiple apps where each app can be dedicated to a different domain or other concern. Sidewinder comes with the core Django application housing all the basic functionality in the kit but you are not limited to add more apps if you want to. Note This step is optional. Feel free to just use the core app if you don't want to separate the project into more apps.","title":"Creating a new Django app"},{"location":"howto/create-app/#use-djangos-startapp-command","text":"If you want to add a new app to house your new application domain separated from core, start by creating the app's folder and invoking the standard Django command startapp : # inside virtual env in the project's root folder mkdir <appsfolder>/<newappname> ./manage.py startapp <newappname> <appsfolder>/<newappname> <appsfolder> will be either appname if you didn't rename anything yet or your new name if you have already renamed the project. It should be the parent directory of the core folder (your new app will be a sibling to core ). <newappname> is how you want to name the new app. For example, if you followed the previous instructions to rename the appname to school and want to create a new app administration you would run ./manage.py startapp administration school/administration .","title":"Use Django's startapp command"},{"location":"howto/create-app/#configuration","text":"Additionaly we will need to make some adjustments to make the new app available. In the newly generated <appsfolder>/<newappname>/apps.py file change the value of name from <newappname> to <appsfolder>.<newappname> . For example from administration to school.administration . Include \"<appsfolder>.<newappname>\" in the INSTALLED_APPS list in the <appsfolder>/settings.py . Now you should be able to apply the new migrations as usual and use the new app.","title":"Configuration"},{"location":"howto/deployment/","text":"Application deployment If you haven't, make sure to provision the server first. The server provisioning from the previous step already deployed our first version of the application. However, for future deployments we don't want to run the whole provisioning playbook (although it should be safe to do so with a small time window when the server won't be available to serve requests). For this purpose there is a separate Make target called deploy . Deploy command To deploy a master branch when application has been updated: cd deployment/ansible make deploy Warning Any content you want to be deployed has to be pushed to the remote Git repository. Deploying a specific version We can identify a specific application version using a git branch (like master ), git tag (like v1.0 ), commit hash, or any other valid identifier. To deploy such specific application version we can set an environment variable called APP_VERSION to such identifier: # inside deployment/ansible APP_VERSION = \"v1.0\" make deploy Considerations Our Ansible playbook will push all new code to the server, run database migrations, and reloads or restarts services (see deployment/ansible/provision.yml for details). It is important that the new version of the application is compatible in the database schema and migration files with what is already in the database on the server. That means you shoudn't try to go back to previous versions and only move forward in your migrations.","title":"Deployment"},{"location":"howto/deployment/#application-deployment","text":"If you haven't, make sure to provision the server first. The server provisioning from the previous step already deployed our first version of the application. However, for future deployments we don't want to run the whole provisioning playbook (although it should be safe to do so with a small time window when the server won't be available to serve requests). For this purpose there is a separate Make target called deploy .","title":"Application deployment"},{"location":"howto/deployment/#deploy-command","text":"To deploy a master branch when application has been updated: cd deployment/ansible make deploy Warning Any content you want to be deployed has to be pushed to the remote Git repository.","title":"Deploy command"},{"location":"howto/deployment/#deploying-a-specific-version","text":"We can identify a specific application version using a git branch (like master ), git tag (like v1.0 ), commit hash, or any other valid identifier. To deploy such specific application version we can set an environment variable called APP_VERSION to such identifier: # inside deployment/ansible APP_VERSION = \"v1.0\" make deploy","title":"Deploying a specific version"},{"location":"howto/deployment/#considerations","text":"Our Ansible playbook will push all new code to the server, run database migrations, and reloads or restarts services (see deployment/ansible/provision.yml for details). It is important that the new version of the application is compatible in the database schema and migration files with what is already in the database on the server. That means you shoudn't try to go back to previous versions and only move forward in your migrations.","title":"Considerations"},{"location":"howto/frontend/","text":"Frontend Basic stylesheets and templates By default, there is a basic CSS file ( static/css/base.css ) that styles a few existing pages, mainly the django-allauth authentication pages. You can build upon this CSS file or replace it. There is no CSS framework included in Sidewinder. django-allauth templates are provided in the templates folder for customization, together with a custom form rendering templates ( templates/forms via CustomFormRenderer ) so that checkboxes are rendered with labels displayed after them. HTMX HTMX is loaded in the _base.html template together with configured CSRF token ( <body hx-headers='{\"X-CSRFToken\": \"{{ csrf_token }}\"}'> ).","title":"Frontend"},{"location":"howto/frontend/#frontend","text":"","title":"Frontend"},{"location":"howto/frontend/#basic-stylesheets-and-templates","text":"By default, there is a basic CSS file ( static/css/base.css ) that styles a few existing pages, mainly the django-allauth authentication pages. You can build upon this CSS file or replace it. There is no CSS framework included in Sidewinder. django-allauth templates are provided in the templates folder for customization, together with a custom form rendering templates ( templates/forms via CustomFormRenderer ) so that checkboxes are rendered with labels displayed after them.","title":"Basic stylesheets and templates"},{"location":"howto/frontend/#htmx","text":"HTMX is loaded in the _base.html template together with configured CSRF token ( <body hx-headers='{\"X-CSRFToken\": \"{{ csrf_token }}\"}'> ).","title":"HTMX"},{"location":"howto/installation/","text":"Installation Info There is currently no project generator. To start using Sidewinder, clone the repository and make configuration changes in your local copy. Clone the repository Tip Feel free to fork the repository first so that you don't have to set up Git remotes later. You can clone Sidewinder from the official repository or your fork: git clone https://github.com/stribny/sidewinder Prerequisites Install Python 3.9+ Before installing Sidewinder, you will need Python 3.9 and Poetry dependency manager. Install Poetry You can install Poetry with pip : pip install poetry Install watchman For fast hot-reloading, make sure to install watchman . Install graphviz (optional) Graphviz is needed by django-extensions for generating model diagrams. You will need to figure out how to install it for your system. On Fedora, use dnf : dnf install graphviz graphviz-devel If you plan to use this feature, install dependencies in the next step with --with graphviz . You can also skip this step if you don't plan to use this feature. Install Sidewinder You can now install Sidewinder from the project's root: poetry install # or with mkdocs poetry install --with docs # or with graphviz poetry install --with graphviz # install pre-commit hooks poetry run pre-commit install From this point onwards, all commands should be run inside the created virtual environment. You can switch to the virtual environment with: poetry shell Install Playwright # inside virtual environment playwright install Now, configure the project .","title":"Installation"},{"location":"howto/installation/#installation","text":"Info There is currently no project generator. To start using Sidewinder, clone the repository and make configuration changes in your local copy.","title":"Installation"},{"location":"howto/installation/#clone-the-repository","text":"Tip Feel free to fork the repository first so that you don't have to set up Git remotes later. You can clone Sidewinder from the official repository or your fork: git clone https://github.com/stribny/sidewinder","title":"Clone the repository"},{"location":"howto/installation/#prerequisites","text":"","title":"Prerequisites"},{"location":"howto/installation/#install-python-39","text":"Before installing Sidewinder, you will need Python 3.9 and Poetry dependency manager.","title":"Install Python 3.9+"},{"location":"howto/installation/#install-poetry","text":"You can install Poetry with pip : pip install poetry","title":"Install Poetry"},{"location":"howto/installation/#install-watchman","text":"For fast hot-reloading, make sure to install watchman .","title":"Install watchman"},{"location":"howto/installation/#install-graphviz-optional","text":"Graphviz is needed by django-extensions for generating model diagrams. You will need to figure out how to install it for your system. On Fedora, use dnf : dnf install graphviz graphviz-devel If you plan to use this feature, install dependencies in the next step with --with graphviz . You can also skip this step if you don't plan to use this feature.","title":"Install graphviz (optional)"},{"location":"howto/installation/#install-sidewinder","text":"You can now install Sidewinder from the project's root: poetry install # or with mkdocs poetry install --with docs # or with graphviz poetry install --with graphviz # install pre-commit hooks poetry run pre-commit install From this point onwards, all commands should be run inside the created virtual environment. You can switch to the virtual environment with: poetry shell","title":"Install Sidewinder"},{"location":"howto/installation/#install-playwright","text":"# inside virtual environment playwright install Now, configure the project .","title":"Install Playwright"},{"location":"howto/provisioning/","text":"Server provisioning This page explains how to get a virtual private server, configure it, and make your first application deployment. Get a VPS The first step is to get your own virtual private server. You can get one on Digital Ocean which can prepare a VPS with your public SSH key in place, so that you don't have to worry much about SSH configuration besides getting a public/private key pair. As the operating system, choose Fedora. You can support Sidewinder by signing up with the affiliate link below (you will get $200 credit you can use in 60 days): Sidewinder is prepared to be deployed to a VPS that has a static IP address, but also to a custom domain with https. In that case, you will also need to register a domain and point it your VPS. Before proceeding, make sure that you have a running private virtual server that you can access with SSH . Warning Sidewinder is prepared to be run on Fedora operating system. When creating your VPS, make sure you choose Fedora Linux distribution as your OS. Install Ansible The next step is to install Ansible . Configure hosts.ini Copy deployment/ansible/hosts.ini to deployment/ansible/myhosts.ini and set ansible_user to be the name of your server account (like root ) and set ansible_host to the IP address of your server. Example: [all] host_name ansible_user = root ansible_host=29.38.208.180 Configure vars.yml Now it's time to configure your server settings. Copy deployment/ansible/vars.yml to deployment/ansible/myvars.yml . You might eventually want to configure each property in the file for your production server. At the minimum to run a successful test deployment you will need to change: project_name to be the name of your application, website or app, e.g. My website domain_name to point to the server's IP address or your domain, e.g. example.com git_url to your repository fork of Sidewinder, e.g. git@github.com:name/mywebsite.git git_key_file to point to your private SSH key file on a local system, e.g. /home/user/.ssh/id_rsa django_ssl set to 1 if you are using a domain ( 0 otherwise) You should also change all passwords and secrets: django_secret_key And set email server settings: django_default_from_email , e.g. hi@example.com django_server_email , e.g. admin@example.com django_email_host , e.g. smtp-relay.example.com django_email_port , e.g. 587 django_email_host_user django_email_host_password admin_email , e.g. admin@example.com Other variables like project_user , app_name , db_name will be used to configure user, app and db names on the server. If you don't plan to use the VPS for other purposes (recommended) or you are not familiar with restrictions on these names, it might be better not to set different values. Warning It is important to point git_url to your repository and to commit and push all application changes you have made to the repository. That's because our deployment Ansible playbook will download and deploy the exact version of the application that will be at the git_url . Run Ansible playbook The provided Ansible playbook will download a copy of your Git repository and deploy the last committed version from the master branch to the specified server. Everything that you want to deploy needs to be pushed to your remote Git repository. cd deployment/ansible make provision Warning You need to be able to run Makefile files on your operating system using the make command. Wait until the deployment is finished. You can verify it by visiting your domain on https or your IP address on http in your browser. Tip Consider using Mitogen for Ansible to make Ansible faster. Create a superuser If the server is up and running we can create our server superuser: # inside deployment/ansible make createsuperuser Final steps There are some final steps to do if you want all features to work: Log in to your Django admin at ipaddress-or-domain/dj-admin/ and create a flat page for URL /terms/ .","title":"Server provisioning"},{"location":"howto/provisioning/#server-provisioning","text":"This page explains how to get a virtual private server, configure it, and make your first application deployment.","title":"Server provisioning"},{"location":"howto/provisioning/#get-a-vps","text":"The first step is to get your own virtual private server. You can get one on Digital Ocean which can prepare a VPS with your public SSH key in place, so that you don't have to worry much about SSH configuration besides getting a public/private key pair. As the operating system, choose Fedora. You can support Sidewinder by signing up with the affiliate link below (you will get $200 credit you can use in 60 days): Sidewinder is prepared to be deployed to a VPS that has a static IP address, but also to a custom domain with https. In that case, you will also need to register a domain and point it your VPS. Before proceeding, make sure that you have a running private virtual server that you can access with SSH . Warning Sidewinder is prepared to be run on Fedora operating system. When creating your VPS, make sure you choose Fedora Linux distribution as your OS.","title":"Get a VPS"},{"location":"howto/provisioning/#install-ansible","text":"The next step is to install Ansible .","title":"Install Ansible"},{"location":"howto/provisioning/#configure-hostsini","text":"Copy deployment/ansible/hosts.ini to deployment/ansible/myhosts.ini and set ansible_user to be the name of your server account (like root ) and set ansible_host to the IP address of your server. Example: [all] host_name ansible_user = root ansible_host=29.38.208.180","title":"Configure hosts.ini"},{"location":"howto/provisioning/#configure-varsyml","text":"Now it's time to configure your server settings. Copy deployment/ansible/vars.yml to deployment/ansible/myvars.yml . You might eventually want to configure each property in the file for your production server. At the minimum to run a successful test deployment you will need to change: project_name to be the name of your application, website or app, e.g. My website domain_name to point to the server's IP address or your domain, e.g. example.com git_url to your repository fork of Sidewinder, e.g. git@github.com:name/mywebsite.git git_key_file to point to your private SSH key file on a local system, e.g. /home/user/.ssh/id_rsa django_ssl set to 1 if you are using a domain ( 0 otherwise) You should also change all passwords and secrets: django_secret_key And set email server settings: django_default_from_email , e.g. hi@example.com django_server_email , e.g. admin@example.com django_email_host , e.g. smtp-relay.example.com django_email_port , e.g. 587 django_email_host_user django_email_host_password admin_email , e.g. admin@example.com Other variables like project_user , app_name , db_name will be used to configure user, app and db names on the server. If you don't plan to use the VPS for other purposes (recommended) or you are not familiar with restrictions on these names, it might be better not to set different values. Warning It is important to point git_url to your repository and to commit and push all application changes you have made to the repository. That's because our deployment Ansible playbook will download and deploy the exact version of the application that will be at the git_url .","title":"Configure vars.yml"},{"location":"howto/provisioning/#run-ansible-playbook","text":"The provided Ansible playbook will download a copy of your Git repository and deploy the last committed version from the master branch to the specified server. Everything that you want to deploy needs to be pushed to your remote Git repository. cd deployment/ansible make provision Warning You need to be able to run Makefile files on your operating system using the make command. Wait until the deployment is finished. You can verify it by visiting your domain on https or your IP address on http in your browser. Tip Consider using Mitogen for Ansible to make Ansible faster.","title":"Run Ansible playbook"},{"location":"howto/provisioning/#create-a-superuser","text":"If the server is up and running we can create our server superuser: # inside deployment/ansible make createsuperuser","title":"Create a superuser"},{"location":"howto/provisioning/#final-steps","text":"There are some final steps to do if you want all features to work: Log in to your Django admin at ipaddress-or-domain/dj-admin/ and create a flat page for URL /terms/ .","title":"Final steps"},{"location":"howto/run/","text":"Start Sidewinder You can run the development server inside the Poetry's virtual environment. If this is the first time, don't forget to run Django's migrate management command before that. # inside project root poetry shell # inside virtual environment ./manage.py migrate # first time ./manage.py runserver","title":"Run the project"},{"location":"howto/run/#start-sidewinder","text":"You can run the development server inside the Poetry's virtual environment. If this is the first time, don't forget to run Django's migrate management command before that. # inside project root poetry shell # inside virtual environment ./manage.py migrate # first time ./manage.py runserver","title":"Start Sidewinder"},{"location":"howto/server-management/","text":"Server management There are some neat commands in the provided deployment/ansible/Makefile that you can run to help you manage your new server: Warning Make sure you configured everything first (see server provisioning ). make provision - Provisions a VPS from scratch (use APP_VERSION env var for a specific version) make deploy - Deploys a new application version (use APP_VERSION env var for a specific version) make login - Gives you a remote SSH shell to your server make status - Gives you status of all important services running (application, database, Redis, queue, webserver) make appservicelog - Prints the last application service logs make queueservicelog - Prints the last queue service logs make webserverservicelog - Prints the last web server service logs make webserveraccesslog - Prints the last web server access logs make monitor - Starts a system monitor on the server (to check on system usage like memory, disk, CPU, etc.) make createsuperuser - Creates a superuser on the server make upgrade - Updates all operating system packages and restarts the server","title":"Server management"},{"location":"howto/server-management/#server-management","text":"There are some neat commands in the provided deployment/ansible/Makefile that you can run to help you manage your new server: Warning Make sure you configured everything first (see server provisioning ). make provision - Provisions a VPS from scratch (use APP_VERSION env var for a specific version) make deploy - Deploys a new application version (use APP_VERSION env var for a specific version) make login - Gives you a remote SSH shell to your server make status - Gives you status of all important services running (application, database, Redis, queue, webserver) make appservicelog - Prints the last application service logs make queueservicelog - Prints the last queue service logs make webserverservicelog - Prints the last web server service logs make webserveraccesslog - Prints the last web server access logs make monitor - Starts a system monitor on the server (to check on system usage like memory, disk, CPU, etc.) make createsuperuser - Creates a superuser on the server make upgrade - Updates all operating system packages and restarts the server","title":"Server management"},{"location":"howto/testing/","text":"Testing Sidewinder comes with a small test suite that provides examples for writing unit tests, API tests, and UI tests. Run tests By default, pytest is configured to run tests without end-to-end UI tests: # inside project root poetry shell # inside virtual environment pytest Run UI tests pytest -m ui","title":"Testing"},{"location":"howto/testing/#testing","text":"Sidewinder comes with a small test suite that provides examples for writing unit tests, API tests, and UI tests.","title":"Testing"},{"location":"howto/testing/#run-tests","text":"By default, pytest is configured to run tests without end-to-end UI tests: # inside project root poetry shell # inside virtual environment pytest","title":"Run tests"},{"location":"howto/testing/#run-ui-tests","text":"pytest -m ui","title":"Run UI tests"},{"location":"reference/commands/","text":"Commands Django You can display all available commands from all Django apps using ./manage.py . Refer to Django and each Django app documentation for more information. All commands here should be run inside the Poetry's virtual environment. Some useful commands: ./manage.py runserver - Starts Django development server ./manage.py fresh - Resets the database and creates a superuser (see fresh.py ) ./manage.py makemigrations - Generates migrations based on model changes ./manage.py migrate - Runs unapplied migrations (syncs the database schema after generating new migration files) ./manage.py sqlmigrate <appname> <migrationfilename> - Examines a migration file by showing what the generated SQL looks like ./manage.py sh - Starts enhanced Python shell with auto-imported models and Django context (IPython is default in Sidewinder) ./manage.py dbshell - Starts db shell (like PostgreSQL's psql) ./manage.py run_huey - Starts Huey consumers (this way you can test huey consumers using Redis locally) ./manage.py print_settings - Prints all Django settings ./manage.py diffsettings - See all Django settings that differ from Django's defaults ./manage.py show_urls - Shows all urlpatterns ./manage.py show_template_tags - Displays template tags and filters available in the current project ./manage.py list_signals - Prints all defined Django signals ./manage.py list_model_info - Prints all models, their attributes and methods ./manage.py notes - Shows all annotations like TODO, FIXME, BUG, HACK, WARNING, NOTE or XXX in the py and HTML files ./manage.py inspectdb - Generates Django models from the database ./manage.py spectacular - Prints generated OpenAPI schema ./manage.py startapp <name> <projectname>/<name> - Creates a new Django app inside \"projectname\" folder (what you chose for renaming the project) ./manage.py createsuperuser - Creates a new super user ./manage.py changepassword <username> - Changes a password for a given user ./manage.py generate_secret_key - Generates Django secret key (useful when needing one for production) ./manage.py admin_generator <appname> - Generates the contents of admin.py for a given Django app ./manage.py describe_form <appname.ModelName> - Generates Django form based on a model ./manage.py drf_create_token <username> - Generates an API token for a given user ./manage.py makemessages --locale=<locale> (or --all ) - Creates or updates messages files for translations ./manage.py compilemessages - Compiles .po files created by makemessages to .mo files ./manage.py clear_cache - Clears Django cache ./manage.py clean_pyc - Removes .pyc files from the project ./manage.py check - Runs Django check list ./manage.py validate_templates - Validates Django templates ./manage.py unreferenced_files - Lists media files that are not referenced anymore by file fields ./manage.py sendtestemail <email@address> - Sends a test email to the provided email address ./manage.py raise_test_exception - Raises a test exception. Useful for testing error reporters such as Sentry Documentation Feel free to modify Sidewinder's documentation site in the docs folder for your needs. mkdocs serve - Start the live-reloading docs server mkdocs build - Build the documentation site","title":"Commands"},{"location":"reference/commands/#commands","text":"","title":"Commands"},{"location":"reference/commands/#django","text":"You can display all available commands from all Django apps using ./manage.py . Refer to Django and each Django app documentation for more information. All commands here should be run inside the Poetry's virtual environment. Some useful commands: ./manage.py runserver - Starts Django development server ./manage.py fresh - Resets the database and creates a superuser (see fresh.py ) ./manage.py makemigrations - Generates migrations based on model changes ./manage.py migrate - Runs unapplied migrations (syncs the database schema after generating new migration files) ./manage.py sqlmigrate <appname> <migrationfilename> - Examines a migration file by showing what the generated SQL looks like ./manage.py sh - Starts enhanced Python shell with auto-imported models and Django context (IPython is default in Sidewinder) ./manage.py dbshell - Starts db shell (like PostgreSQL's psql) ./manage.py run_huey - Starts Huey consumers (this way you can test huey consumers using Redis locally) ./manage.py print_settings - Prints all Django settings ./manage.py diffsettings - See all Django settings that differ from Django's defaults ./manage.py show_urls - Shows all urlpatterns ./manage.py show_template_tags - Displays template tags and filters available in the current project ./manage.py list_signals - Prints all defined Django signals ./manage.py list_model_info - Prints all models, their attributes and methods ./manage.py notes - Shows all annotations like TODO, FIXME, BUG, HACK, WARNING, NOTE or XXX in the py and HTML files ./manage.py inspectdb - Generates Django models from the database ./manage.py spectacular - Prints generated OpenAPI schema ./manage.py startapp <name> <projectname>/<name> - Creates a new Django app inside \"projectname\" folder (what you chose for renaming the project) ./manage.py createsuperuser - Creates a new super user ./manage.py changepassword <username> - Changes a password for a given user ./manage.py generate_secret_key - Generates Django secret key (useful when needing one for production) ./manage.py admin_generator <appname> - Generates the contents of admin.py for a given Django app ./manage.py describe_form <appname.ModelName> - Generates Django form based on a model ./manage.py drf_create_token <username> - Generates an API token for a given user ./manage.py makemessages --locale=<locale> (or --all ) - Creates or updates messages files for translations ./manage.py compilemessages - Compiles .po files created by makemessages to .mo files ./manage.py clear_cache - Clears Django cache ./manage.py clean_pyc - Removes .pyc files from the project ./manage.py check - Runs Django check list ./manage.py validate_templates - Validates Django templates ./manage.py unreferenced_files - Lists media files that are not referenced anymore by file fields ./manage.py sendtestemail <email@address> - Sends a test email to the provided email address ./manage.py raise_test_exception - Raises a test exception. Useful for testing error reporters such as Sentry","title":"Django"},{"location":"reference/commands/#documentation","text":"Feel free to modify Sidewinder's documentation site in the docs folder for your needs. mkdocs serve - Start the live-reloading docs server mkdocs build - Build the documentation site","title":"Documentation"}]}