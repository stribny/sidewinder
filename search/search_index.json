{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sidewinder Sidewinder is an open-source Django starter kit that focuses on good defaults, developer experience, and deployment. Also, a snake . You can start a new Django project without worrying about the correct project structure, or what development and testing tools to install and how to configure them. You can also deploy your new project right away with provided Ansible playbook in a few minutes. Warning Sidewinder is under development. Follow @stribny for updates. Philosophy Sidewinder is opinionated to provide smooth experience from starting a new project to deploying it on a single Virtual Private Server (VPS). It is ideal for indie hackers, educators, students and the like. Main features Configuration Good default project structure Dependency management with Poetry that makes it straightforward to manage virtual environments Project configuration via environment variables thanks to django-environ Authentication Custom User model to allow future extensibility Configured django-allauth for email login and easy extensibility Stronger password hashing with argon2-cffi Frontend It is expected that you bring your own CSS/CSS framework Basic one-file CSS to style authentication-related and example pages Configured htmx for smoother frontend interactions HTTP APIs Django REST Framework for writing REST APIs with configured token authentication drf-spectacular for HTTP API documentation drf-standardized-errors for standardized API responses, including configuration for drf-spectacular django-cors-headers to allow cross-origin requests (restricted to HTTP API endpoints) Development Tools django-extensions for additional Django commands like shell_plus django-browser-reload and pywatchman for auto reloading django-debug-toolbar for debugging django-silk for profiling requests and db queries snoop for ad-hoc debugging Black for automatic code formatting flake8 linter isort for sorting imports pre-commit hook configured with Black, Flake8, and isort bandit for finding security issues Logging with structlog via django-structlog Testing pytest test runner via pytest-django Useful pytest plugins like pytest-sugar , pytest-icdiff , pytest-randomly , pytest-cov factoryboy for defining fixtures Faker for generating fake data Playwright for end-to-end UI testing openapi-spec-validator for validating the generated API specs Deployment Prepared deployment to a single Virtual Private Server (VPS) with reverse proxy and PostgreSQL database Ansible playbook that deploys the project in one go Fedora as the compatible operating system PostgreSQL as the database Caddy as the reverse proxy server gunicorn as the WSGI HTTP Server systemd service","title":"Introduction"},{"location":"#sidewinder","text":"Sidewinder is an open-source Django starter kit that focuses on good defaults, developer experience, and deployment. Also, a snake . You can start a new Django project without worrying about the correct project structure, or what development and testing tools to install and how to configure them. You can also deploy your new project right away with provided Ansible playbook in a few minutes. Warning Sidewinder is under development. Follow @stribny for updates.","title":"Sidewinder"},{"location":"#philosophy","text":"Sidewinder is opinionated to provide smooth experience from starting a new project to deploying it on a single Virtual Private Server (VPS). It is ideal for indie hackers, educators, students and the like.","title":"Philosophy"},{"location":"#main-features","text":"","title":"Main features"},{"location":"#configuration","text":"Good default project structure Dependency management with Poetry that makes it straightforward to manage virtual environments Project configuration via environment variables thanks to django-environ","title":"Configuration"},{"location":"#authentication","text":"Custom User model to allow future extensibility Configured django-allauth for email login and easy extensibility Stronger password hashing with argon2-cffi","title":"Authentication"},{"location":"#frontend","text":"It is expected that you bring your own CSS/CSS framework Basic one-file CSS to style authentication-related and example pages Configured htmx for smoother frontend interactions","title":"Frontend"},{"location":"#http-apis","text":"Django REST Framework for writing REST APIs with configured token authentication drf-spectacular for HTTP API documentation drf-standardized-errors for standardized API responses, including configuration for drf-spectacular django-cors-headers to allow cross-origin requests (restricted to HTTP API endpoints)","title":"HTTP APIs"},{"location":"#development-tools","text":"django-extensions for additional Django commands like shell_plus django-browser-reload and pywatchman for auto reloading django-debug-toolbar for debugging django-silk for profiling requests and db queries snoop for ad-hoc debugging Black for automatic code formatting flake8 linter isort for sorting imports pre-commit hook configured with Black, Flake8, and isort bandit for finding security issues Logging with structlog via django-structlog","title":"Development Tools"},{"location":"#testing","text":"pytest test runner via pytest-django Useful pytest plugins like pytest-sugar , pytest-icdiff , pytest-randomly , pytest-cov factoryboy for defining fixtures Faker for generating fake data Playwright for end-to-end UI testing openapi-spec-validator for validating the generated API specs","title":"Testing"},{"location":"#deployment","text":"Prepared deployment to a single Virtual Private Server (VPS) with reverse proxy and PostgreSQL database Ansible playbook that deploys the project in one go Fedora as the compatible operating system PostgreSQL as the database Caddy as the reverse proxy server gunicorn as the WSGI HTTP Server systemd service","title":"Deployment"},{"location":"howto/admin/","text":"Administration Create a super user to administer the Django application: # inside project root poetry shell # inside virtual environment ./manage.py createsuperuser You can then use Django admin at <site url>/dj-admin/ , in development at http://localhost:8000/dj-admin/ .","title":"Administration"},{"location":"howto/admin/#administration","text":"Create a super user to administer the Django application: # inside project root poetry shell # inside virtual environment ./manage.py createsuperuser You can then use Django admin at <site url>/dj-admin/ , in development at http://localhost:8000/dj-admin/ .","title":"Administration"},{"location":"howto/configuration/","text":"Configuration Sidewinder is completely configured via environment variables with the help of django-environ . Start by creating .env file with your local settings in the project's root directory. You can begin by copying .env-example . .env file config Secret key In production, make sure to set a unique secret key (doesn't matter for development): DJANGO_SECRET_KEY = secretkey Debug mode DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 Set to 0 to disable debug mode. Allowed hosts DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 Add additional hosts as needed in production. SSL DJANGO_SSL = 0 Set to 1 in production to configure https. Emails Replace values according to your email server: DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = Replace to set default email prefix and origin address: DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = Database Set a connection string to SQLite or PostgreSQL database: DJ_DATABASE_CONN_STRING = Alternatively, create a sidewinder PostgreSQL database on the port 5432 with postgres user and postgres password, and make sure that the database is available for connections. Then use this example connection string: DJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder Complete configuration DJANGO_SECRET_KEY = secretkey DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 DJANGO_SSL = 0 DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = DJ_DATABASE_CONN_STRING = postgres://postgres:postgres@localhost:5432/sidewinder Rename app folder The main application folder is called appname . To rename it, you will also need to find and replace references to appname in the repository. You can use these Bash commands in the root folder (replace myapp with your new name): sed -i 's/appname\\./myapp\\./g' ` grep 'appname\\.' -rl * ` mv appname/ myapp/ Alternatively, find and replace appname. with myapp. in all project files in your editor of choice. Then rename the appname folder with myapp . Verify that everything works You can verify the configuration by running the project .","title":"Configuration"},{"location":"howto/configuration/#configuration","text":"Sidewinder is completely configured via environment variables with the help of django-environ . Start by creating .env file with your local settings in the project's root directory. You can begin by copying .env-example .","title":"Configuration"},{"location":"howto/configuration/#env-file-config","text":"","title":".env file config"},{"location":"howto/configuration/#secret-key","text":"In production, make sure to set a unique secret key (doesn't matter for development): DJANGO_SECRET_KEY = secretkey","title":"Secret key"},{"location":"howto/configuration/#debug-mode","text":"DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 Set to 0 to disable debug mode.","title":"Debug mode"},{"location":"howto/configuration/#allowed-hosts","text":"DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 Add additional hosts as needed in production.","title":"Allowed hosts"},{"location":"howto/configuration/#ssl","text":"DJANGO_SSL = 0 Set to 1 in production to configure https.","title":"SSL"},{"location":"howto/configuration/#emails","text":"Replace values according to your email server: DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = Replace to set default email prefix and origin address: DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX =","title":"Emails"},{"location":"howto/configuration/#database","text":"Set a connection string to SQLite or PostgreSQL database: DJ_DATABASE_CONN_STRING = Alternatively, create a sidewinder PostgreSQL database on the port 5432 with postgres user and postgres password, and make sure that the database is available for connections. Then use this example connection string: DJ_DATABASE_CONN_STRING=postgres://postgres:postgres@localhost:5432/sidewinder","title":"Database"},{"location":"howto/configuration/#complete-configuration","text":"DJANGO_SECRET_KEY = secretkey DJANGO_DEBUG = 1 DJANGO_DEBUG_TOOLBAR = 1 DJANGO_ALLOWED_HOSTS = localhost,127.0.0.1 DJANGO_SSL = 0 DJANGO_SERVER_EMAIL = sidewinder@example.com DJANGO_EMAIL_HOST = example.emailprovider.com DJANGO_EMAIL_PORT = 587 DJANGO_EMAIL_HOST_USER = DJANGO_EMAIL_HOST_PASSWORD = DJANGO_DEFAULT_FROM_EMAIL = sidewinder@example.com ALLAUTH_ACCOUNT_EMAIL_SUBJECT_PREFIX = DJ_DATABASE_CONN_STRING = postgres://postgres:postgres@localhost:5432/sidewinder","title":"Complete configuration"},{"location":"howto/configuration/#rename-app-folder","text":"The main application folder is called appname . To rename it, you will also need to find and replace references to appname in the repository. You can use these Bash commands in the root folder (replace myapp with your new name): sed -i 's/appname\\./myapp\\./g' ` grep 'appname\\.' -rl * ` mv appname/ myapp/ Alternatively, find and replace appname. with myapp. in all project files in your editor of choice. Then rename the appname folder with myapp .","title":"Rename app folder"},{"location":"howto/configuration/#verify-that-everything-works","text":"You can verify the configuration by running the project .","title":"Verify that everything works"},{"location":"howto/deployment/","text":"Deployment Warning Deployment documentation is in progress. Get a VPS The first step is to get your own virtual private server. You can get one on Digital Ocean which can prepare a VPS with your public SSH key in place, so that you don't have to worry much about SSH configuration besides getting a public/private key pair. As the operating system, choose Fedora. You can support Sidewinder by signing up with the affiliate link below (you will get $200 credit you can use in 60 days): Sidewinder is prepared to be deployed to a VPS that has a static IP address, but also to a custom domain with https. In that case, you will also need to register a domain and point it your VPS. Before proceeding, make sure that you have a running private virtual server that you can access with SSH . Warning Sidewinder is prepared to be run on Fedora operating system. When creating your VPS, make sure you choose Fedora Linux distribution as your OS. Install Ansible The next step is to install Ansible . Configure hosts.ini Copy deployment/ansible/hosts.ini to deployment/ansible/myhosts.ini and set ansible_user to be the name of your server account (like root ) and set ansible_host to the IP address of your server. Configure vars.yml Now it's time to configure your server settings. Copy deployment/ansible/vars.yml to deployment/ansible/myvars.yml . You will eventually want to configure each property in the file for your production server. At the minimum to run a successful test deployment you will need to change: project_name to be the name of your application, website or app domain_name to point to the server's IP address or your domain git_url to your repository fork of Sidewinder git_key_file to point to your private SSH key file django_ssl set to 1 if you are using a domain ( 0 otherwise) You should also change all passwords: db_password django_secret_key And set email server settings: django_default_from_email django_server_email django_email_host django_email_port django_email_host_user django_email_host_password Warning It is important to point git_url to your repository and to commit and push all application changes you have made to the repository. That's because our deployment Ansible playbook will download and deploy the exact version of the application that will be at the git_url . Run Ansible playbook The provided Ansible playbook will download a copy of your Git repository and deploy the last committed version to the specified server. cd deployment/ansible ansible-playbook provision.yml -i myhosts.ini --extra-vars \"@myvars.yml\" Wait until the deployment is finished. Tip Consider using Mitogen for Ansible to make Ansible faster. Create a superuser SSH to your server (replace X.X.X.X with the server's IP address): ssh root@X.X.X.X and run: cd /srv/sidewinder su sidewinder poetry run ./manage.py createsuperuser Final steps Log in to your Django admin at ipaddress-or-domain/dj-admin/ and create a flat page for URL /terms/ .","title":"Deployment"},{"location":"howto/deployment/#deployment","text":"Warning Deployment documentation is in progress.","title":"Deployment"},{"location":"howto/deployment/#get-a-vps","text":"The first step is to get your own virtual private server. You can get one on Digital Ocean which can prepare a VPS with your public SSH key in place, so that you don't have to worry much about SSH configuration besides getting a public/private key pair. As the operating system, choose Fedora. You can support Sidewinder by signing up with the affiliate link below (you will get $200 credit you can use in 60 days): Sidewinder is prepared to be deployed to a VPS that has a static IP address, but also to a custom domain with https. In that case, you will also need to register a domain and point it your VPS. Before proceeding, make sure that you have a running private virtual server that you can access with SSH . Warning Sidewinder is prepared to be run on Fedora operating system. When creating your VPS, make sure you choose Fedora Linux distribution as your OS.","title":"Get a VPS"},{"location":"howto/deployment/#install-ansible","text":"The next step is to install Ansible .","title":"Install Ansible"},{"location":"howto/deployment/#configure-hostsini","text":"Copy deployment/ansible/hosts.ini to deployment/ansible/myhosts.ini and set ansible_user to be the name of your server account (like root ) and set ansible_host to the IP address of your server.","title":"Configure hosts.ini"},{"location":"howto/deployment/#configure-varsyml","text":"Now it's time to configure your server settings. Copy deployment/ansible/vars.yml to deployment/ansible/myvars.yml . You will eventually want to configure each property in the file for your production server. At the minimum to run a successful test deployment you will need to change: project_name to be the name of your application, website or app domain_name to point to the server's IP address or your domain git_url to your repository fork of Sidewinder git_key_file to point to your private SSH key file django_ssl set to 1 if you are using a domain ( 0 otherwise) You should also change all passwords: db_password django_secret_key And set email server settings: django_default_from_email django_server_email django_email_host django_email_port django_email_host_user django_email_host_password Warning It is important to point git_url to your repository and to commit and push all application changes you have made to the repository. That's because our deployment Ansible playbook will download and deploy the exact version of the application that will be at the git_url .","title":"Configure vars.yml"},{"location":"howto/deployment/#run-ansible-playbook","text":"The provided Ansible playbook will download a copy of your Git repository and deploy the last committed version to the specified server. cd deployment/ansible ansible-playbook provision.yml -i myhosts.ini --extra-vars \"@myvars.yml\" Wait until the deployment is finished. Tip Consider using Mitogen for Ansible to make Ansible faster.","title":"Run Ansible playbook"},{"location":"howto/deployment/#create-a-superuser","text":"SSH to your server (replace X.X.X.X with the server's IP address): ssh root@X.X.X.X and run: cd /srv/sidewinder su sidewinder poetry run ./manage.py createsuperuser","title":"Create a superuser"},{"location":"howto/deployment/#final-steps","text":"Log in to your Django admin at ipaddress-or-domain/dj-admin/ and create a flat page for URL /terms/ .","title":"Final steps"},{"location":"howto/frontend/","text":"Frontend Basic stylesheets and templates By default, there is a basic CSS file ( static/css/base.css ) that styles a few existing pages, mainly the django-allauth authentication pages. You can build upon this CSS file or replace it. There is no CSS framework included in Sidewinder. django-allauth templates are provided in the templates folder for customization, together with a custom form rendering templates ( templates/forms via CustomFormRenderer ) so that checkboxes are rendered with labels displayed after them. HTMX HTMX is loaded in the _base.html template together with configured CSRF token ( <body hx-headers='{\"X-CSRFToken\": \"{{ csrf_token }}\"}'> ).","title":"Frontend"},{"location":"howto/frontend/#frontend","text":"","title":"Frontend"},{"location":"howto/frontend/#basic-stylesheets-and-templates","text":"By default, there is a basic CSS file ( static/css/base.css ) that styles a few existing pages, mainly the django-allauth authentication pages. You can build upon this CSS file or replace it. There is no CSS framework included in Sidewinder. django-allauth templates are provided in the templates folder for customization, together with a custom form rendering templates ( templates/forms via CustomFormRenderer ) so that checkboxes are rendered with labels displayed after them.","title":"Basic stylesheets and templates"},{"location":"howto/frontend/#htmx","text":"HTMX is loaded in the _base.html template together with configured CSRF token ( <body hx-headers='{\"X-CSRFToken\": \"{{ csrf_token }}\"}'> ).","title":"HTMX"},{"location":"howto/installation/","text":"Installation Info There is currently no project generator. To start using Sidewinder, clone the repository and make configuration changes in your local copy. Clone the repository Tip Feel free to fork the repository first so that you don't have to set up Git remotes later. You can clone Sidewinder from the official repository or your fork: git clone https://github.com/stribny/sidewinder Prerequisites Install Python 3.9+ Before installing Sidewinder, you will need Python 3.9 and Poetry dependency manager. Install Poetry You can install Poetry with pip : pip install poetry Install watchman For fast hot-reloading, make sure to install watchman . Install graphviz (optional) Graphviz is needed by django-extensions for generating model diagrams. You will need to figure out how to install it for your system. On Fedora, use dnf : dnf install graphviz graphviz-devel If you plan to use this feature, install dependencies in the next step with --with graphviz . You can also skip this step if you don't plan to use this feature. Install Sidewinder You can now install Sidewinder from the project's root: poetry install # or with mkdocs poetry install --with docs # or with graphviz poetry install --with graphviz # install pre-commit hooks poetry run pre-commit install From this point onwards, all commands should be run inside the created virtual environment. You can switch to the virtual environment with: poetry shell Install Playwright # inside virtual environment playwright install Now, configure the project .","title":"Installation"},{"location":"howto/installation/#installation","text":"Info There is currently no project generator. To start using Sidewinder, clone the repository and make configuration changes in your local copy.","title":"Installation"},{"location":"howto/installation/#clone-the-repository","text":"Tip Feel free to fork the repository first so that you don't have to set up Git remotes later. You can clone Sidewinder from the official repository or your fork: git clone https://github.com/stribny/sidewinder","title":"Clone the repository"},{"location":"howto/installation/#prerequisites","text":"","title":"Prerequisites"},{"location":"howto/installation/#install-python-39","text":"Before installing Sidewinder, you will need Python 3.9 and Poetry dependency manager.","title":"Install Python 3.9+"},{"location":"howto/installation/#install-poetry","text":"You can install Poetry with pip : pip install poetry","title":"Install Poetry"},{"location":"howto/installation/#install-watchman","text":"For fast hot-reloading, make sure to install watchman .","title":"Install watchman"},{"location":"howto/installation/#install-graphviz-optional","text":"Graphviz is needed by django-extensions for generating model diagrams. You will need to figure out how to install it for your system. On Fedora, use dnf : dnf install graphviz graphviz-devel If you plan to use this feature, install dependencies in the next step with --with graphviz . You can also skip this step if you don't plan to use this feature.","title":"Install graphviz (optional)"},{"location":"howto/installation/#install-sidewinder","text":"You can now install Sidewinder from the project's root: poetry install # or with mkdocs poetry install --with docs # or with graphviz poetry install --with graphviz # install pre-commit hooks poetry run pre-commit install From this point onwards, all commands should be run inside the created virtual environment. You can switch to the virtual environment with: poetry shell","title":"Install Sidewinder"},{"location":"howto/installation/#install-playwright","text":"# inside virtual environment playwright install Now, configure the project .","title":"Install Playwright"},{"location":"howto/run/","text":"Start Sidewinder You can run the development server inside the Poetry's virtual environment. If this is the first time, don't forget to run Django's migrate management command before that. # inside project root poetry shell # inside virtual environment ./manage.py migrate # first time ./manage.py runserver","title":"Run the project"},{"location":"howto/run/#start-sidewinder","text":"You can run the development server inside the Poetry's virtual environment. If this is the first time, don't forget to run Django's migrate management command before that. # inside project root poetry shell # inside virtual environment ./manage.py migrate # first time ./manage.py runserver","title":"Start Sidewinder"},{"location":"howto/testing/","text":"Testing Sidewinder comes with a small test suite that provides examples for writing unit tests, API tests, and UI tests. Run tests By default, pytest is configured to run tests without end-to-end UI tests: # inside project root poetry shell # inside virtual environment pytest Run UI tests pytest -k \"ui\"","title":"Testing"},{"location":"howto/testing/#testing","text":"Sidewinder comes with a small test suite that provides examples for writing unit tests, API tests, and UI tests.","title":"Testing"},{"location":"howto/testing/#run-tests","text":"By default, pytest is configured to run tests without end-to-end UI tests: # inside project root poetry shell # inside virtual environment pytest","title":"Run tests"},{"location":"howto/testing/#run-ui-tests","text":"pytest -k \"ui\"","title":"Run UI tests"},{"location":"reference/commands/","text":"Commands Warning This page is under construction. All commands here should be run inside the Poetry's virtual environment. Backend ./manage.py runserver - Start Django development server Documentation Feel free to modify Sidewinder's documentation site in the docs folder for your needs. mkdocs serve - Start the live-reloading docs server mkdocs build - Build the documentation site","title":"Commands"},{"location":"reference/commands/#commands","text":"Warning This page is under construction. All commands here should be run inside the Poetry's virtual environment.","title":"Commands"},{"location":"reference/commands/#backend","text":"./manage.py runserver - Start Django development server","title":"Backend"},{"location":"reference/commands/#documentation","text":"Feel free to modify Sidewinder's documentation site in the docs folder for your needs. mkdocs serve - Start the live-reloading docs server mkdocs build - Build the documentation site","title":"Documentation"}]}